package problem0055

/*
题：
给定一个非负整数数组，你最初位于数组的第一个位置。
数组中的每个元素代表你在该位置可以跳跃的最大长度。
判断你是否能够到达最后一个位置。

示例 1:
输入: [2,3,1,1,4]
输出: true
解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。

示例 2:
输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是0，所以你永远不可能到达最后一个位置。

思路：
关键能不能跨过数值为0的元素。
*/

func canJump(nums []int) bool {

	for i := len(nums) - 2; i >= 0; i-- {
		// 找到数值为 0 的元素
		if nums[i] != 0 {
			continue
		}

		j := i - 1
		for ; j >= 0; j-- {
			if i-j < nums[j] {
				// 在 j 号位置上，可以跨过 0 元素
				i = j
				break
			}
		}

		if j == -1 {
			// 在 0 元素之前，没有位置可以跨过 0
			return false
		}
	}

	return true
}
