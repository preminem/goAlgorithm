package problem48

/*
题目：
给定一个 n × n 的二维矩阵表示一个图像。
将图像顺时针旋转 90 度。

说明：
你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。

示例 :
给定 matrix =
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

原地旋转输入矩阵，使其变为:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]

思路：
刚开始，假设一个5*5的数组，然后我先旋转四个角的元素，这个很简单，简单排序算法中两个元素交换的延申而已。
然后我尝试交换下一组元素，我交换完成外圈元素时，发现了很有规律的现象：
当我们把数组值的行列下标对应到坐标系中时，可以将各元素，看做一个点，那么整个坐标系中有四个点(这里不能贴图，建议在纸上画出来，方便理解)。
四个点的规律如下：四个点绝对向一个方向移动，且有一个下标保持不变。
1.左上角的点，绝对向右移动，
2.右上角的点，绝对向下移动，
3.右下角的点，绝对向左移动，
4.左下角的点，绝对向上移动，
归纳得到有两个固定不变的值，其对应在第一次旋转中，分别是0和matrix.length。
剩余两个变化的值也有规律，分别是两个运动轨迹:从0->matrix.length和从matrix.length->0
提取运动轨迹间的关系，就能通过循环，完成第一圈旋转
开始内圈旋转的时候，变换固定值，约束内圈，返回到开始的思路，继续旋转
*/

func rotate(m [][]int) {
	n := len(m)
	for i := 0; i < n/2; i++ {
		for j := i; j < n-i-1; j++ {
			temp := m[i][j]
			// 左边的行 等于 右边的列
			m[i][j] = m[n-j-1][i]
			m[n-j-1][i] = m[n-i-1][n-j-1]
			m[n-i-1][n-j-1] = m[j][n-i-1]
			m[j][n-i-1] = temp
		}
	}
}
